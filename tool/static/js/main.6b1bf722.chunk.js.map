{"version":3,"sources":["Tools.js","Form.js","App.js","serviceWorker.js","index.js"],"names":["Tools","lattitude","altitude","Math","pow","cos","Form","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","handleSubmit","bind","assertThisInitialized","field","_this2","e","setState","defineProperty","currentTarget","value","preventDefault","l","l_levels","toString","final","document","getElementById","innerHTML","console","log","react_default","a","createElement","className","type","name","onChange","update","onClick","id","React","Component","App","src_Form","Boolean","window","location","hostname","match","ReactDOM","render","src_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2QAAqBA,wGACDC,EAAWC,GACvB,OAAOA,GAAY,KAAAC,KAAAC,IAAQD,KAAKE,IAAIJ,GAAc,aCkE3CK,cAhEX,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACTd,UAAW,GACXC,SAAU,IAEdM,EAAKQ,aAAeR,EAAKQ,aAAaC,KAAlBR,OAAAS,EAAA,EAAAT,CAAAD,IANLA,sEAeZW,GAAO,IAAAC,EAAAT,KACV,OAAO,SAAAU,GAAC,OAAID,EAAKE,SAALb,OAAAc,EAAA,EAAAd,CAAA,GACPU,EAAQE,EAAEG,cAAcC,8CAIpBJ,GACTA,EAAEK,iBACF,IAAIC,EAAI3B,EAAM4B,SAASjB,KAAKI,MAAMd,UAAWU,KAAKI,MAAMb,UAAU2B,WAC9DC,EAAQC,SAASC,eAAe,SACpCF,EAAMG,UAAY,GAClBH,EAAMG,WAAaN,EAEfA,GAAK,KAAOA,GAAK,KACjBO,QAAQC,IAAIR,GACZG,EAAMG,WAAa,wDACZN,GAAK,GAAKA,GAAK,IACtBG,EAAMG,WAAa,yFAKvB,OACIG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACXH,EAAAC,EAAAC,cAAA,YACIF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACXH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,UAAjB,aAERH,EAAAC,EAAAC,cAAA,SAAOE,KAAK,OAAOC,KAAK,YAAYC,SAAU/B,KAAKgC,OAAO,gBAElDP,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,SAAOC,UAAU,UAAjB,YAERH,EAAAC,EAAAC,cAAA,SAAOE,KAAK,OAAOC,KAAK,WAAWC,SAAU/B,KAAKgC,OAAO,gBAGrDP,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,SAAOE,KAAK,SAASf,MAAM,SAASmB,QAASjC,KAAKK,eAClDoB,EAAAC,EAAAC,cAAA,aAGRF,EAAAC,EAAAC,cAAA,OAAKO,GAAG,kBA1DLC,IAAMC,iBCWVC,MAVf,WACE,OACEZ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAACW,EAAD,SCIYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpB,EAAAC,EAAAC,cAACmB,EAAD,MAAS1B,SAASC,eAAe,SD2H3C,kBAAmB0B,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.6b1bf722.chunk.js","sourcesContent":["export default class Tools {\n    static l_levels(lattitude, altitude) {\n        return altitude / (6380 * (Math.cos(lattitude) ** 2))\n    }\n}","import React from 'react';\nimport Tools from './Tools';\n\nclass Form extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            lattitude: '',\n            altitude: ''\n        };\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    // componentWillReceiveProps(nextProps) {\n    //     if (nextProps.loggedIn) {\n    //         this.props.history.push('/');\n    //     }\n    // }\n\n    update(field) {\n        return e => this.setState({\n            [field]: e.currentTarget.value\n        });\n    }\n\n    handleSubmit(e) {\n        e.preventDefault();\n        let l = Tools.l_levels(this.state.lattitude, this.state.altitude).toString();\n        let final = document.getElementById(\"final\");\n        final.innerHTML = \"\";\n        final.innerHTML += l;\n\n        if (l >= 1.5 && l <= 2.5) {\n            console.log(l);\n            final.innerHTML += '<br/> You are located within the 1st Van Allen Belt!'\n        } else if (l >= 4 && l <= 5) {\n            final.innerHTML += '<br/> You are located within the 2nd Van Allen Belt!'\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"background\">\n                <div className=\"window\">\n                    <form>\n                        <div className=\"labels\">\n                            <label className=\"inputs\">\n                                Lattitude:\n                    <input type=\"text\" name=\"lattitude\" onChange={this.update('lattitude')} />\n                            </label>\n                            <br />\n                            <label className=\"inputs\">\n                                Altitude:\n                    <input type=\"text\" name=\"altitude\" onChange={this.update('altitude')} />\n                            </label>\n                        </div>\n                        <br/>\n                        <input type=\"submit\" value=\"Submit\" onClick={this.handleSubmit}/>\n                        <br/>\n                    </form>\n                </div>\n                <div id=\"final\">\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Form;\n","import React from 'react';\nimport Form from './Form.js';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Form />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}